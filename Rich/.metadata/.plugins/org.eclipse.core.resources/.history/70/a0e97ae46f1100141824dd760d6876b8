package datas;

enum Types {Land, Bank, Cards, Prison};

class Lattice
{
	Types type;
	int street;
	int owner;
	int level;          //土地等级
	int landValue;    //土地价值 / 购买所需费用
	int fee;       //过路费
	int upPrice;    //升到下一级所需费用
	
	Lattice()
	{
		level = 0;
		owner = -1;
	}
}

public class ChessBoard 
{
	static Lattice board[] = new Lattice[50];
	public static int latticeNum;
	
	ChessBoard()
	{
		latticeNum = 30;
		//set street, fee, type and landValue
		//for (int i = 0;i < latticeNum;i++)
		//{
			
		//}
	}
	
	public int getOwner(int position)
	{
		return board[position].owner;
	}
	
	public int getLattice(int number, int player)
	{
		Types t = board[number].type;
		if (t == Types.Land)
		{
			if (board[number].owner == -1)
				return 0;   //询问是否买地
			if (board[number].owner != player)
				return 1;    //付过路费
			if (board[number].level < 3)
				return 2;     //询问是否加盖
		}
		if (t == Types.Bank)
			return 3;     //存取款操作
		if (t == Types.Cards)
			return 4;       //抽取卡片操作
		return -1;        //什么也没发生   
	}
	
	public int getData(int result, int position, int n)
	{
		switch (result)
		{
		case 0:
			return board[position].landValue;
		case 1:
			return getFee(position);
		case 2:
			return board[position].upPrice;
		case 4:
			return Cards.getCards(n);
		default:
			return -1;
		}
	}
	
	public int getFee(int number)
	{
		int sum = board[number].fee;
		for (int i = number + 1;i < latticeNum;i++)
		{
			if (board[i].street == board[number].street)
			{
				if (board[i].type == Types.Land && board[i].owner == board[number].owner)
					sum += board[i].fee;
			}
			else break;
		}
		for (int i = number - 1;i >= 0;i--)
		{
			if (board[i].street == board[number].street)
			{
				if (board[i].type == Types.Land && board[i].owner == board[number].owner)
					sum += board[i].fee;
			}
			else break;
		}
		return sum;
	}
	
	
}
